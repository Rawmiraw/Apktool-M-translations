<?xml version="1.0" encoding="utf-8"?>
<resources>
	<string-array name="smali_help_names">
		<item>Registers</item>
		<item>Literal values</item>
		<item>Primitive data types</item>
	</string-array>
	<string-array name="smali_help_common_names">
		<item>nop</item>
		<item>move vA, vB</item>
		<item>move/from16 vAA, vBBBB</item>
		<item>move/16 vAAAA, vBBBB</item>
		<item>move-wide vA, vB</item>
		<item>move-wide/from16 vAA, vBBBB</item>
		<item>move-wide/16 vAAAA, vBBBB</item>
		<item>move-object vA, vB</item>
		<item>move-object/from16 vAA, vBBBB</item>
		<item>move-object/16 vAAAA, vBBBB</item>
		<item>move-result vAA</item>
		<item>move-result-wide vAA</item>
		<item>move-result-object vAA</item>
		<item>move-exception vAA</item>
		<item>return-void</item>
		<item>return vAA</item>
		<item>return-wide vAA</item>
		<item>return-object vAA</item>
		<item>const/4 vA, 0xF</item>
		<item>const/16 vAA, 0xFFFF</item>
		<item>const vAA, 0xFFFFFFFF</item>
		<item>const/high16 vAA, 0xFFFF</item>
		<item>const-wide/16 vAA, 0xFFFF</item>
		<item>const-wide/32 vAA, 0xFFFFFFFF</item>
		<item>const-wide vAA, #FFFFFFFFFFFFFFFF</item>
		<item>const-wide/high16 vAA, 0xFFFF</item>
		<item>const-string vAA, string</item>
		<item>const-string/jumbo vAA, string (32-bit index)</item>
		<item>const-class vAA, type</item>
		<item>monitor-enter vAA</item>
		<item>monitor-exit vAA</item>
		<item>check-cast vAA, type</item>
		<item>instance-of vA, vB, type</item>
		<item>array-length vA, vB</item>
		<item>new-instance vAA, type</item>
		<item>new-array vA, vB, type</item>
		<item>filled-new-array {vC, vD, vE, vF, vG}, type</item>
		<item>filled-new-array/range {vCCCC .. vNNNN}, type</item>
		<item>fill-array-data vAA, :array</item>
		<item>throw vAA</item>
		<item>goto :goto_XX</item>
		<item>goto/16 :goto_XXXX</item>
		<item>goto/32 :goto_XXXXXXXX</item>
		<item>packed-switch vAA, :pswitch_data</item>
		<item>sparse-switch vAA, :sswitch_data</item>
		<item>cmpl-float vAA, vBB, vCC</item>
		<item>cmpg-float vAA, vBB, vCC</item>
		<item>cmpl-double vAA, vBB, vCC</item>
		<item>cmpg-double vAA, vBB, vCC</item>
		<item>cmp-long vAA, vBB, vCC</item>
		<item>if-eq vA, vB, :cond_XXXX</item>
		<item>if-ne vA, vB, :cond_XXXX</item>
		<item>if-lt vA, vB, :cond_XXXX</item>
		<item>if-le vA, vB, :cond_XXXX</item>
		<item>if-gt vA, vB, :cond_XXXX</item>
		<item>if-ge vA, vB, :cond_XXXX</item>
		<item>if-eqz vAA, :cond_XXXX</item>
		<item>if-nez vAA, :cond_XXXX</item>
		<item>if-ltz vAA, :cond_XXXX</item>
		<item>if-lez vAA, :cond_XXXX</item>
		<item>if-gtz vAA, :cond_XXXX</item>
		<item>if-gez vAA, :cond_XXXX</item>
		<item>aget vAA, vBB, vCC</item>
		<item>aget-wide vAA, vBB, vCC</item>
		<item>aget-object vAA, vBB, vCC</item>
		<item>aget-boolean vAA, vBB, vCC</item>
		<item>aget-byte vAA, vBB, vCC</item>
		<item>aget-char vAA, vBB, vCC</item>
		<item>aget-short vAA, vBB, vCC</item>
		<item>aput vAA, vBB, vCC</item>
		<item>aput-wide vAA, vBB, vCC</item>
		<item>aput-object vAA, vBB, vCC</item>
		<item>aput-boolean vAA, vBB, vCC</item>
		<item>aput-byte vAA, vBB, vCC</item>
		<item>aput-char vAA, vBB, vCC</item>
		<item>aput-short vAA, vBB, vCC</item>
		<item>iget vA, vB, fields</item>
		<item>iget-wide vA, vB, fields</item>
		<item>iget-object vA, vB, fields</item>
		<item>iget-boolean vA, vB, fields</item>
		<item>iget-byte vA, vB, field</item>
		<item>iget-char vA, vB, field</item>
		<item>iget-short vA, vB, fields</item>
		<item>iput vA, vB, fields</item>
		<item>iput-wide vA, vB, fields</item>
		<item>iput-object vA, vB, fields</item>
		<item>iput-boolean vA, vB, fields</item>
		<item>iput-byte vA, vB, fields</item>
		<item>iput-char vA, vB, fields</item>
		<item>iput-short vA, vB, fields</item>
		<item>sget vAA, static field</item>
		<item>sget-wide vAA, static field</item>
		<item>sget-object vAA, static field</item>
		<item>sget-boolean vAA, static field</item>
		<item>sget-byte vAA, static field</item>
		<item>sget-char vAA, static field</item>
		<item>sget-short vAA, static field</item>
		<item>sput vAA, static field</item>
		<item>sput-wide vAA, static field</item>
		<item>sput-object vAA, static field</item>
		<item>sput-boolean vAA, static field</item>
		<item>sput-byte vAA, static field</item>
		<item>sput-char vAA, static field</item>
		<item>sput-short vAA, static field</item>
		<item>invoke-virtual {vC, vD, vE, vF, vG}, method</item>
		<item>invoke-super {vC, vD, vE, vF, vG}, method</item>
		<item>invoke-direct {vC, vD, vE, vF, vG}, method</item>
		<item>invoke-static {vC, vD, vE, vF, vG}, method</item>
		<item>invoke-interface {vC, vD, vE, vF, vG}, method</item>
		<item>invoke-virtual/range {vCCCC .. vNNNN}, method</item>
		<item>invoke-super/range {vCCCC .. vNNNN}, method</item>
		<item>invoke-direct/range {vCCCC .. vNNNN}, method</item>
		<item>invoke-static/range {vCCCC .. vNNNN}, method</item>
		<item>invoke-interface/range {vCCCC .. vNNNN}, method</item>
		<item>neg-int vA, vB</item>
		<item>not-int vA, vB</item>
		<item>neg-long vA, vB</item>
		<item>not-long vA, vB</item>
		<item>neg-float vA, vB</item>
		<item>neg-double vA, vB</item>
		<item>int-to-long vA, vB</item>
		<item>int-to-float vA, vB</item>
		<item>int-to-double vA, vB</item>
		<item>long-to-int vA, vB</item>
		<item>long-to-float vA, vB</item>
		<item>long-to-double vA, vB</item>
		<item>float-to-int vA, vB</item>
		<item>float-to-long vA, vB</item>
		<item>float-to-double vA, vB</item>
		<item>double-to-int vA, vB</item>
		<item>double-to-long vA, vB</item>
		<item>double-to-float vA, vB</item>
		<item>int-to-byte vA, vB</item>
		<item>int-to-char vA, vB</item>
		<item>int-to-short vA, vB</item>
		<item>add-int vAA, vBB, vCC</item>
		<item>sub-int vAA, vBB, vCC</item>
		<item>mul-int vAA, vBB, vCC</item>
		<item>div-int vAA, vBB, vCC</item>
		<item>rem-int vAA, vBB, vCC</item>
		<item>and-int vAA, vBB, vCC</item>
		<item>or-int vAA, vBB, vCC</item>
		<item>xor-int vAA, vBB, vCC</item>
		<item>shl-int vAA, vBB, vCC</item>
		<item>shr-int vAA, vBB, vCC</item>
		<item>ushr-int vAA, vBB, vCC</item>
		<item>add-long vAA, vBB, vCC</item>
		<item>sub-long vAA, vBB, vCC</item>
		<item>mul-long vAA, vBB, vCC</item>
		<item>div-long vAA, vBB, vCC</item>
		<item>rem-long vAA, vBB, vCC</item>
		<item>and-long vAA, vBB, vCC</item>
		<item>or-long vAA, vBB, vCC</item>
		<item>xor-long vAA, vBB, vCC</item>
		<item>shl-long vAA, vBB, vCC</item>
		<item>shr-long vAA, vBB, vCC</item>
		<item>ushr-long vAA, vBB, vCC</item>
		<item>add-float vAA, vBB, vCC</item>
		<item>sub-float vAA, vBB, vCC</item>
		<item>mul-float vAA, vBB, vCC</item>
		<item>div-float vAA, vBB, vCC</item>
		<item>rem-float vAA, vBB, vCC</item>
		<item>add-double vAA, vBB, vCC</item>
		<item>sub-double vAA, vBB, vCC</item>
		<item>mul-double vAA, vBB, vCC</item>
		<item>div-double vAA, vBB, vCC</item>
		<item>rem-double vAA, vBB, vCC</item>
		<item>add-int/2addr vA, vB</item>
		<item>sub-int/2addr vA, vB</item>
		<item>mul-int/2addr vA, vB</item>
		<item>div-int/2addr vA, vB</item>
		<item>rem-int/2addr vA, vB</item>
		<item>and-int/2addr vA, vB</item>
		<item>or-int/2addr vA, vB</item>
		<item>xor-int/2addr vA, vB</item>
		<item>shl-int/2addr vA, vB</item>
		<item>shr-int/2addr vA, vB</item>
		<item>ushr-int/2addr vA, vB</item>
		<item>add-long/2addr vA, vB</item>
		<item>sub-long/2addr vA, vB</item>
		<item>mul-long/2addr vA, vB</item>
		<item>div-long/2addr vA, vB</item>
		<item>rem-long/2addr vA, vB</item>
		<item>and-long/2addr vA, vB</item>
		<item>or-long/2addr vA, vB</item>
		<item>xor-long/2addr vA, vB</item>
		<item>shl-long/2addr vA, vB</item>
		<item>shr-long/2addr vA, vB</item>
		<item>ushr-long/2addr vA, vB</item>
		<item>add-float/2addr vA, vB</item>
		<item>sub-float/2addr vA, vB</item>
		<item>mul-float/2addr vA, vB</item>
		<item>div-float/2addr vA, vB</item>
		<item>rem-float/2addr vA, vB</item>
		<item>add-double/2addr vA, vB</item>
		<item>sub-double/2addr vA, vB</item>
		<item>mul-double/2addr vA, vB</item>
		<item>div-double/2addr vA, vB</item>
		<item>rem-double/2addr vA, vB</item>
		<item>add-int/lit16 vA, vB, 0xFFFF</item>
		<item>rsub-int vA, vB, 0xFFFF</item>
		<item>mul-int/lit16 vA, vB, 0xFFFF</item>
		<item>div-int/lit16 vA, vB, 0xFFFF</item>
		<item>rem-int/lit16 vA, vB, 0xFFFF</item>
		<item>and-int/lit16 vA, vB, 0xFFFF</item>
		<item>or-int/lit16 vA, vB, 0xFFFF</item>
		<item>xor-int/lit16 vA, vB, 0xFFFF</item>
		<item>add-int/lit8 vAA, vBB, 0xFF</item>
		<item>rsub-int/lit8 vAA, vBB, 0xFF</item>
		<item>mul-int/lit8 vAA, vBB, 0xFF</item>
		<item>div-int/lit8 vAA, vBB, 0xFF</item>
		<item>rem-int/lit8 vAA, vBB, 0xFF</item>
		<item>and-int/lit8 vAA, vBB, 0xFF</item>
		<item>or-int/lit8 vAA, vBB, 0xFF</item>
		<item>xor-int/lit8 vAA, vBB, 0xFF</item>
		<item>shl-int/lit8 vAA, vBB, 0xFF</item>
		<item>shr-int/lit8 vAA, vBB, 0xFF</item>
		<item>ushr-int/lit8 vAA, vBB, 0xFF</item>
		<item>invoke-polymorphic {vC, vD, vE, vF, vG}, method, prototype</item>
		<item>invoke-polymorphic/range {vCCCC .. vNNNN}, method, prototype</item>
		<item>invoke-custom {vC, vD, vE, vF, vG}, call site</item>
		<item>invoke-custom/range {vCCCC .. vNNNN}, call point</item>
		<item>const-method-handle vAA, method handle</item>
		<item>const-method-type vAA, method prototype</item>
	</string-array>
	<string-array name="smali_help_values" formatted="false">
		<item>vA is a 4-bit register with the value range v0 - v15\nvAA is an 8-bit register with a value range of v0 - v255\nvAAAA is a 16-bit register with a value range of v0 - v65535</item>
		<item>0xF, 0xFF, etc. are used. to represent literal values. Like registers, the number F is used to represent a range of values, for example:\nThe range of 0xF values is represented by [-0x8, 0x7]\nThe range of values of 0xFF is represented by [-0x80, 0x7F]</item>
		<item>V - void, Z - boolean, B - byte\nC - char, S - short, I - int\nJ - long, F - float, D - double\nvoid: can only be used for return types\nboolean: stores the value true or false\nbyte: stores an integer from -128 to 127 and occupies 1 byte\nshort: stores an integer from -32768 to 32767 and takes 2 bytes\nint: stores an integer from -2147483648 to 2147483647 and occupies 4 bytes\nlong: stores an integer from -9223372036854775808 to 9223372036854775807 and occupies 8 bytes\ndouble: stores a floating point number from ±4.9*10³²⁴ to ±1.7976931348623157*10³⁰⁸ and occupies 8 bytes. A dot is used as the decimal separator in fractional literals.\nfloat: stores a floating point number from -3.4*10³⁸ to 3.4*10³⁸ and occupies 4 bytes\nchar: stores a single character in UTF-16 encoding and occupies 2 bytes, so the range of stored values is from 0 to 65535.</item>
		<item>No action.</item>
		<item>Moves the value of register vB to register vA.</item>
		<item>Moves the value of the vBBBB register to the vAA register.</item>
		<item>Moves the value of the vBBBB register to the vAAAA register.</item>
		<item>Moves the long/double value of register pair (vB, vB+1) to register pair vA, vA+1.</item>
		<item>Moves the long/double value of a register pair (vBBBB, vBBBB+1) to a register pair vAA, vAA+1.</item>
		<item>Moves the long/double value of a register pair (vBBBB, vBBBB+1) to a register pair vAAAA, vAAAA+1.</item>
		<item>Moves an object reference from the vB register to the vA register.</item>
		<item>Moves an object reference from the vBBBB register to the vAA register.</item>
		<item>Moves an object reference from the vBBBB register to the vAAAA register.</item>
		<item>Moves the return value of the previously called method into the vAA register.</item>
		<item>Moves the long/double value returned by the previously called method into the register pair vAA, vAA+1.</item>
		<item>Moves the object reference returned by the previously called method into the vAA register.</item>
		<item>Moves the reference to the excluded object issued during the method call (during execution) to the vAA register.</item>
		<item>Return with no return value.</item>
		<item>Return by returning the value from the vAA register.</item>
		<item>Return by returning a double/long value into a pair of registers vAA, vAA+1.</item>
		<item>Return by returning the value of the object reference from the vAA register.</item>
		<item>Places a 4-bit constant into the vA register.</item>
		<item>Places a 16-bit constant into the vAA register.</item>
		<item>Places an integer constant into the vAA register.</item>
		<item>Places a 16-bit constant into the upper bits of the vAA register. Used to initialize float (floating point) values.</item>
		<item>Places a 16-bit integer constant into the register pair vAA, vAA+1, converting the integer constant to a long constant.</item>
		<item>Places a 32-bit integer constant into the register pair vAA, vAA+1, converting the integer constant to a long constant.</item>
		<item>Places a 64-bit constant into the register pair vAA, vAA+1.</item>
		<item>Places a 16-bit constant into the top 16-bits of the register pair vAA, vAA+1. Used to initialize double (floating point) values.</item>
		<item>Places a reference to the specified string in the vAA register.</item>
		<item>Places a reference to the specified string in the vAA register.</item>
		<item>Places a reference to the string constant (string) identified by string_id into the vAA register.</item>
		<item>Gets the object monitor referenced by the vAA register.</item>
		<item>Releases the object monitor referenced by the vAA register.</item>
		<item>Checks whether an object reference contained in the vAA register can be cast to the class identified by type_id. Throws a ClassCastException if it cannot, otherwise continues execution.</item>
		<item>Checks whether the contents of the vB register is an instance of the class identified by type_id. Sets register vA to non-zero if present, 0 if not.\nvA = vB instanceOf type ? 10</item>
		<item>Determines the number of array elements from the vB register and places the value in the vA register.\nvA = vB.length</item>
		<item>Creates an instance of an object type and places a reference to the created instance in the vAA register.</item>
		<item>Creates a new array of type_id variables with the size of register vB elements and places a reference to the array in register vA.</item>
		<item>Creates a new data array of type type_id and fills it with parameters (that is, no long/double arrays, but reference types are allowed). A reference to the newly created array can be obtained using the move-result-object statement immediately following this statement (if one is to be used).</item>
		<item>Creates a new data array of type type_id and fills it with a range of parameters (that is, no long/double arrays, but reference types are acceptable). A reference to the newly created array can be obtained using the move-result-object statement immediately following this statement (if one is to be used).</item>
		<item>Fills the array referenced in the vAA register with static data. The data location is the sum of the position of the present instruction and the offset.</item>
		<item>Throws an exception object. A reference to the exception object in the vAA register.</item>
		<item>Unconditionally jump to a short (integer) 8-bit offset.</item>
		<item>Unconditional jump to 16-bit offset.</item>
		<item>Unconditional jump to 32-bit offset.</item>
		<item>Implements the Switch operator when the control constants are close to each other (in a row). The instruction uses an index table. The instruction offset for a particular case is determined by the vAA index. If the vAA index goes beyond the table, execution continues with the next statement (default).</item>
		<item>Implements the Switch operator in case of a sparse table. The instruction uses a table that specifies offsets for each constant. If no matches are found in the table, then the next statement is executed (default case).</item>
		<item>Compares the float (floating point) values in vBB and vCC and places the integer value in the vAA register:\nvAA = vBB &lt; vCC ? yes: 1, no: -1, equal: 0</item>
		<item>Compares the float (floating point) values in vBB and vCC and places the integer value in the vAA register:\nvAA = vBB &lt; vCC ? yes: 1, no: -1, equal: 0</item>
		<item>Compares the double (floating point) values in vBB and vCC and places the integer value in the vAA register:\nvAA = (vBB, vBB+1) &lt; (vCC, vCC+1) ? y\nyes: 1, no: -1, equal: 0</item>
		<item>Compares the double (floating point) values in vBB and vCC and places the integer value in the vAA register:\nvAA = (vBB, vBB+1) > (vCC, vCC+1) ? yes: 1, no: -1, equal: 0</item>
		<item>Compares the long (integer) values in vBB and vCC and places the integer (integer) value in the vAA register:\nvAA = (vBB, vBB+1) > (vCC, vCC+1) ? yes: 1, no: -1, equal: 0</item>
		<item>Jumps to the specified label if vA == vB. vA and vB contain integer values.\n(eq is short for Equals)</item>
		<item>Jumps to the specified label if vA != vB. vA and vB contain integer values.\n(ne is short for Not Equals)</item>
		<item>Jumps to the specified label if vA &lt; vB. vA and vB contain integer values.\n(lt is short for Less Than)</item>
		<item>Jumps to the specified label if vA &lt;= vB. vA and vB contain integer values.\n(le is an abbreviation for Less than or Equal/Less or equal)</item>
		<item>Jumps to the specified label if vA > vB. vA and vB contain integer values.\n(gt is short for Greater Than/More Than)</item>
		<item>Jumps to the specified label if vA >= vB. vA and vB contain integer values.\n(ge is short for Greater than or Equal)</item>
		<item>Jumps to the specified label if vAA == 0. vAA contains an integer value.\n(eqz is short for Equals to Zero)</item>
		<item>Jumps to the specified label if vAA != 0. vAA contains an integer value.\n(nez is short for Not Equals to Zero)</item>
		<item>Jumps to the specified label if vAA &lt; 0. vAA contains an integer value.\n(ltz is short for Less Than Zero)</item>
		<item>Jumps to the specified label if vAA &lt;= 0. vAA contains an integer value.\n(lez is an abbreviation for Less than or Equal to Zero/Less or equal to zero)</item>
		<item>Jumps to the specified label if vAA > 0. vAA contains an integer value.\n(gtz is short for Greater Than Zero)</item>
		<item>Jumps to the specified label if vAA >= 0. vAA contains an integer value.\n(gez is an abbreviation for Greater than or Equal to Zero)</item>
		<item>Gets an integer value at the index contained in vCC from the array referenced in vBB and places it in the vAA register.\nvAA = vBB[vCC]</item>
		<item>Gets, at the index contained in vCC, from the array referenced in vBB, a double/long value and places it in the register pair vAA, vAA+1.\n(vAA, vAA+1) = vBB[vCC]</item>
		<item>Receives, at the index contained in vCC, from the array referenced in vBB, a reference to the object and places it in the vAA register.\nvAA = vBB[vCC]</item>
		<item>Gets, at the index contained in vCC, from the array referenced in vBB, a boolean value and places it in the vAA register.\nvAA = vBB[vCC]</item>
		<item>Retrieves, at the index contained in vCC, from the array referenced in vBB, a byte (integer) value and places it in the vAA register.\nvAA = vBB[vCC]</item>
		<item>Retrieves, at the index contained in vCC, from the array referenced in vBB, a char value and places it in the vAA register.\nvAA = vBB[vCC]</item>
		<item>Retrieves, at the index contained in vCC, from the array referenced in vBB, a short (integer) value and places it in the vAA register.\nvAA = vBB[vCC]</item>
		<item>Places the integer value from vAA into the array referenced in vBB with the element containing the vCC register.\nvBB[vCC] = vAA</item>
		<item>Places a double/long value from the register pair vAA, vAA+1 into the array referenced in vBB, with the element containing the vCC register.\nvBB[vCC] = (vAA, vAA+1)</item>
		<item>Places a reference to an object from vAA into the array referenced in vBB with an element with the vCC register.\nvBB[vCC] = vAA</item>
		<item>Places the boolean value from vAA into the array referenced by vBB with the element containing the vCC register.\nvBB[vCC] = vAA</item>
		<item>Places the byte (integer) value from vAA into the array referenced in vBB with the element containing the register vCC.\nvBB[vCC] = vAA</item>
		<item>Places the char (character) value from vAA into the array referenced in vBB by element with register vCC.\nvBB[vCC] = vAA</item>
		<item>Places the short (integer) value from vAA into the array referenced in vBB with the element containing the vCC register.\nvBB[vCC] = vAA</item>
		<item>Reads the value from the instance field and places it in the vA register. The reference to the class containing this field is in the vB register.\nvA = vB.field</item>
		<item>Reads a double/long value from an instance field and places it in a pair of registers (vA, vA+1). The reference to the class containing this field is in the vB register.\n(vA, vA+1) = vB.field</item>
		<item>Reads an object reference from an instance field and places it in the vA register. The reference to the class containing this field is in the vB register.\nvA = vB.field</item>
		<item>Reads a boolean value from the instance field and places it in the vA register. The reference to the class containing this field is in the vB register.\nvA = vB.field</item>
		<item>Reads a byte (integer) value from an instance field and places it in the vA register. The reference to the class containing this field is in the vB register.\nvA = vB.field</item>
		<item>Reads a char value from an instance field and places it in the vA register. The reference to the class containing this field is in the vB register.\nvA = vB.field</item>
		<item>Reads a short (integer) value from an instance field and places it in the vA register. The reference to the class containing this field is in the vB register.\nvA = vB.field</item>
		<item>Places the value from the vA register into the instance field. The reference to the class containing this field is in the vB register.\nvB.field = vA</item>
		<item>Places a double/long value from a register pair (vA, vA+1) into an instance field. The reference to the class containing this field is in the vB register.\nvB.field = (vA, vA+1)</item>
		<item>Places a reference to an object from the vA register into the instance field. The reference to the class containing this field is in the vB register.\nvB.field = vA</item>
		<item>Places the boolean value from the vA register into the instance field. The reference to the class containing this field is in the vB register.\nvB.field = vA</item>
		<item>Sets the byte (integer) value of the specified Boolean field in the instance referenced by register vB equal to the value of register vA, that is:\nvB.field = vA</item>
		<item>Sets the char (character) value of the specified Boolean field in the instance referenced by register vB equal to the value of register vA, that is:\nvB.field = vA</item>
		<item>Sets the short (integer) value of the specified Boolean field in the instance referenced by register vB equal to the value of register vA, that is:\nvB.field = vA</item>
		<item>Reads a value from a static field and places it in the vAA register. The register containing the reference to the class containing this field is not used.</item>
		<item>Reads a double/long value from a static field and places it in a pair of registers vAA, vAA+1. The register containing the reference to the class containing this field is not used.</item>
		<item>Reads an object reference from a static field and places it in the vAA register. The register containing the reference to the class containing this field is not used.</item>
		<item>Reads a boolean value from a static field and places it in the vAA register. The register containing the reference to the class containing this field is not used.</item>
		<item>Reads a byte (integer) value from a static field and places it in the vAA register. The register containing the reference to the class containing this field is not used.</item>
		<item>Reads a char value from a static field and places it in the vAA register. The register containing the reference to the class containing this field is not used.</item>
		<item>Reads a short (integer) value from a static field and places it in the vAA register. The register containing the reference to the class containing this field is not used.</item>
		<item>Places the value from the vAA register into a field (static field). The register containing the reference to the class containing this field is not used.</item>
		<item>Places a double/long value from a pair of registers vAA, vAA+1 into a field (static field). The register containing the reference to the class containing this field is not used.</item>
		<item>Places a reference to an object from the vAA register into a field (static field). The register containing the reference to the class containing this field is not used.</item>
		<item>Places the boolean value from the vAA register into a field (static field). The register containing the reference to the class containing this field is not used.</item>
		<item>Places a byte (integer) value from the vAA register into a field (static field). The register containing the reference to the class containing this field is not used.</item>
		<item>Places the char value from the vAA register into a static field. The register containing the reference to the class containing this field is not used.</item>
		<item>Places the short (integer) value from the vAA register into a static field. The register containing the reference to the class containing this field is not used.</item>
		<item>Calls (runs) a virtual method with parameters. Parameters are indicated in curly braces. The first parameter (register v2) contains a reference to the class containing the called method, the second parameter (the contents of register v3) is passed to the called method.</item>
		<item>Calls (runs) a virtual method with parameters directly from the parent class.</item>
		<item>Calls (runs) a method with parameters without the permissions of the virtual method.</item>
		<item>Calls (runs) a static method with parameters. Parameters are indicated in curly braces. The parameter (the contents of register v3) is passed to the called method. The class containing the called method is indicated after the curly braces.</item>
		<item>Calls (runs) an interface method with parameters.</item>
		<item>Calls (runs) a virtual method with parameters, but the parameters must be contained in registers with numbers in order.</item>
		<item>Calls (runs) a virtual method with parameters directly from the parent class, but the parameters must be contained in registers with sequential numbers.</item>
		<item>Calls (runs) a method with parameters without virtual method permissions, but the parameters must be contained in sequentially numbered registers.</item>
		<item>Calls (runs) a static method with parameters, but the parameters must be contained in registers with sequential numbers.</item>
		<item>Calls (runs) an interface method with parameters, but the parameters must be contained in sequentially numbered registers.</item>
		<item>Calculates vA = -vB for values of type integer.</item>
		<item>Calculates vA = ~vB for integer values.\nvA = ~vB</item>
		<item>Calculates (vA, vA+1) = -(vB, vB+1) for values of type long (integer).</item>
		<item>Calculates (vA, vA+1) = ~(vB, vB+1) for values of type long (integer).</item>
		<item>Calculates vA = -vB for float values.</item>
		<item>Calculates (vA, vA+1) = -(vB, vB+1) for double (floating point) values.</item>
		<item>Converts an integer from vB to a long and stores it in the register pair vA, vA+1.\n(vA, vA+1) = (long) vB</item>
		<item>Converts an integer from vB to a float and stores it in the vA register.\nvA = (float) vB</item>
		<item>Converts an integer from vB to a double (floating point) and stores it in a register pair vA, vA+1.\n(vA, vA+1) = (double) vB</item>
		<item>Converts a long (integer) value from vB, vB+1 to an integer (integer) and stores it in the vA register.\nvA = (int) (vB, vB+1)</item>
		<item>Converts a long (integer) value from vB, vB+1 to a float (floating point) and stores it in the vA register.\nvA = (float) (vB, vB+1)</item>
		<item>Converts a long (integer) value from vB, vB+1 to a double (floating point) and stores it in a register pair vA, vA+1.\n(vA, vA+1) = (double) (vB, vB+1)</item>
		<item>Converts a float (floating point) value from vB to an integer (integer) value and stores it in the vA register.\nvA = (int)vB</item>
		<item>Converts a float (floating point) value from vB to a long (integer) value and stores it in the register pair vA, vA+1.\n(vA, vA+1) = (long) vB</item>
		<item>Converts a float (floating point) value from vB to a double (floating point) value and stores it in the register pair vA, vA+1.\n(vA, vA+1) = (double) vB</item>
		<item>Converts a double (floating point) value from vB, vB+1 to an integer (integer) value and stores it in the vA register.\nvA = (int) (vB, vB+1)</item>
		<item>Converts a double (floating point) value from vB, vB+1 to a long (integer) value and stores it in a register pair vA, vA+1.\n(vA, vA+1) = (long) (vB, vB+1)</item>
		<item>Converts a double (floating point) value from vB, vB+1 to a float (floating point) value and stores it in the vA register.\nvA = (float) (vB, vB+1)</item>
		<item>Converts an integer value from vB to a byte value and stores it in the vA register.\nvA = (byte) vB</item>
		<item>Converts an integer value from vB to a char value and stores it in the vA register.\nvA = (char)vB</item>
		<item>Converts an integer value from vB to a short value and stores it in the vA register.\nvA = (short) vB</item>
		<item>Calculates vBB + vCC and stores the result in the vAA register. All values are integer.\nvAA = vBB + vCC</item>
		<item>Calculates vBB - vCC and stores the result in the vAA register. All values are integer.\nvAA = vBB - vCC</item>
		<item>Calculates vBB * vCC and stores the result in the vAA register. All values are integer.\nvAA = vBB * vCC</item>
		<item>Calculates vBB / vCC and stores the result in the vAA register. All values are integer.\nvAA = vBB / vCC</item>
		<item>Calculates vBB % vCC and stores the result in the vAA register. All values are integer.\nvAA = vBB % vCC</item>
		<item>Calculates vBB &amp; vCC (logical AND) and stores the result in the vAA register. All values are integer.\nvAA = vBB &amp; vCC</item>
		<item>Calculates vBB | vCC (logical OR) and stores the result in the vAA register. All values are integer.\nvAA = vBB | vCC</item>
		<item>Computes vBB ^ vCC (exclusive OR) and stores the result in the vAA register. All values are integer.\nvAA = vBB ^ vCC</item>
		<item>Shifts vBB left by the number of bits specified by vCC and stores the result in the vAA register. All values are integer.\nvAA = vBB &lt;&lt; vCC</item>
		<item>Shifts vBB to the right by the number of bits specified by vCC and stores the result in the vAA register. All values are integer.\nvAA = vBB >> vCC</item>
		<item>Shifts vBB without preserving sign to the right by the number of bits specified by vCC, and stores the result in the vAA register. All values are integer.\nvAA = vBB >>> vCC</item>
		<item>Computes (vBB, vBB+1) + (vCC, vCC+1) and stores the result in the register pair vAA, vAA+1. All values are long (integer).\n(vAA, vAA+1) = (vBB, vBB+1) + (vCC, vCC+1)</item>
		<item>Calculates (vBB, vBB+1) - (vCC, vCC+1) and stores the result in the register pair vAA, vAA+1. All values are long (integer).\n(vAA, vAA+1) = (vBB, vBB+1) - (vCC, vCC+1)</item>
		<item>Computes (vBB, vBB+1) * (vCC, vCC+1) and stores the result in the register pair vAA, vAA+1. All values are long (integer).\n(vAA, vAA+1) = (vBB, vBB+1) * (vCC, vCC+1)</item>
		<item>Calculates (vBB, vBB+1) / (vCC, vCC+1) and stores the result in the register pair vAA, vAA+1. All values are long (integer).\n(vAA, vAA+1) = (vBB, vBB+1) / (vCC, vCC+1)</item>
		<item>Calculates (vBB, vBB+1) % (vCC, vCC+1) and stores the result in the register pair vAA, vAA+1. All values are long (integer).\n(vAA, vAA+1) = (vBB, vBB+1) % (vCC, vCC+1)</item>
		<item>Computes (vBB, vBB+1) &amp; (vCC, vCC+1) (logical AND) and stores the result in the register pair vAA, vAA+1. All values are long (integer).\n(vAA, vAA+1) = (vBB, vBB+1) &amp; (vCC, vCC+1)</item>
		<item>Computes (vBB, vBB+1) | (vCC, vCC+1) (logical OR) and stores the result in a pair of registers vAA, vAA+1. All values are long (integer).\n(vAA, vAA+1) = (vBB, vBB+1) | (vCC, vCC+1)</item>
		<item>Computes (vBB, vBB+1) ^ (vCC, vCC+1) (exclusive AND) and stores the result in the register pair vAA, vAA+1. All values are long (integer).\n(vAA, vAA+1) = (vBB, vBB+1) ^ (vCC, vCC+1)</item>
		<item>Shifts vBB, vBB+1 to the left by the number of bits specified by vCC, and stores the result in the register pair vAA, vAA+1. All values are long (integer).\n(vAA, vAA+1) = (vBB, vBB+1) &lt;&lt; vCC</item>
		<item>Shifts vBB, vBB+1 to the right by the number of bits specified by vCC, and stores the result in the register pair vAA, vAA+1. All values are long (integer).\n(vAA, vAA+1) = (vBB, vBB+1) >> vCC</item>
		<item>Shifts vBB, vBB+1 to the right without preserving the sign by the number of bits specified by vCC, and stores the result in a pair of registers vAA, vA+1. All values are long (integer).\n(vAA, vAA+1) = (vBB, vBB+1) >>> vCC</item>
		<item>Calculates vBB + vCC and stores the result in the vAA register. All values are float.\nvAA = vBB + vCC</item>
		<item>Calculates vBB - vCC and stores the result in the vAA register. All values are float.\nvAA = vBB - vCC</item>
		<item>Calculates vBB * vCC and stores the result in the vAA register. All values are float.\nvAA = vBB * vCC</item>
		<item>Calculates vBB / vCC and stores the result in the vAA register. All values are float.\nvAA = vBB / vCC</item>
		<item>Calculates vBB % vCC and stores the result in the vAA register. All values are float.\nvAA = vBB % vCC</item>
		<item>Computes (vBB, vBB+1) + (vCC, vCC+1) and stores the result in the register pair vAA, vAA+1. All values are double (floating point).\n(vAA, vAA+1) = (vBB, vBB+1) + (vCC, vCC+1)</item>
		<item>Calculates (vBB, vBB+1) - (vCC, vCC+1) and stores the result in the register pair vAA, vAA+1. All values are double (floating point).\n(vAA, vAA+1) = (vBB, vBB+1) - (vCC, vCC+1)</item>
		<item>Computes (vBB, vBB+1) * (vCC, vCC+1) and stores the result in the register pair vAA, vAA+1. All values are double (floating point).\n(vAA, vAA+1) = (vBB, vBB+1) * (vCC, vCC+1)</item>
		<item>Calculates (vBB, vBB+1) / (vCC, vCC+1) and stores the result in the register pair vAA, vAA+1. All values are double (floating point).\n(vAA, vAA+1) = (vBB, vBB+1) / (vCC, vCC+1)</item>
		<item>Calculates (vBB, vBB+1) % (vCC, vCC+1) and stores the result in the register pair vAA, vAA+1. All values are double (floating point).\n(vAA, vAA+1) = (vBB, vBB+1) % (vCC, vCC+1)</item>
		<item>Computes vA + vB and stores the result in the vA register. All values are integer.\nvA = vA + vB</item>
		<item>Calculates vA - vB and stores the result in the vA register. All values are integer.\nvA = vA - vB</item>
		<item>Calculates vA * vB and stores the result in the vA register. All values are integer.\nvA = vA * vB</item>
		<item>Calculates vA / vB and stores the result in the vA register. All values are integer.\nvA = vA / vB</item>
		<item>Calculates vA % vB and stores the result in the vA register. All values are integer.\nvA = vA % vB</item>
		<item>Computes vA &amp; vB (logical AND) and stores the result in the vA register. All values are integer.\nvA = vA &amp; vB</item>
		<item>Calculates vA | vB (logical OR) and stores the result in the vA register. All values are integer.\nvA = vA | vB</item>
		<item>Computes vA ^ vB (exclusive OR) and stores the result in the vA register. All values are integer.\nvA = vA ^ vB</item>
		<item>Shifts vA to the left by the number of bits specified by vB and stores the result in the vA register. All values are integer.\nvA = vA &lt;&lt; vB</item>
		<item>Shifts vA to the right by the number of bits specified by vB and stores the result in the vA register. All values are integer.\nvA = vA >> vB</item>
		<item>Shifts vA without preserving its sign to the right by the number of bits specified by vB, and stores the result in the vA register. All values are integer.\nvA = vA >>> vB</item>
		<item>Computes (vA, vA+1) + (vB, vB+1) and stores the result in the register pair vA, vA+1. All values are long (integer).\n(vA, vA+1) = (vA, vA+1) + (vB, vB+1)</item>
		<item>Calculates (vA, vA+1) - (vB, vB+1) and stores the result in a pair of registers vA, vA+1. All values are long (integer).\n(vA, vA+1) = (vA, vA+1) - (vB, vB+1)</item>
		<item>Computes (vA, vA+1) * (vB, vB+1) and stores the result in the register pair vA, vA+1. All values are long (integer).\n(vA, vA+1) = (vA, vA+1) * (vB, vB+1)</item>
		<item>Calculates (vA, vA+1) / (vB, vB+1) and stores the result in the register pair vA, vA+1. All values are long (integer).\n(vA, vA+1) = (vA, vA+1) / (vB, vB+1)</item>
		<item>Calculates (vA, vA+1) % (vB, vB+1) and stores the result in the register pair vA, vA+1. All values are long (integer).\n(vA, vA+1) = (vA, vA+1) % (vB, vB+1)</item>
		<item>Computes (vA, vA+1) &amp; (vB, vB+1) (logical AND) and stores the result in the register pair vA, vA+1. All values are long (integer).\n(vA, vA+1) = (vA, vA+1) &amp; (vB, vB+1)</item>
		<item>Calculates (vA, vA+1) | (vB, vB+1) (logical OR) and stores the result in a pair of registers vA, vA+1. All values are long (integer).\n(vA, vA+1) = (vA, vA+1) | (vB, vB+1)</item>
		<item>Computes (vA, vA+1) &amp; (vB, vB+1) (exclusive OR) and stores the result in the register pair vA, vA+1. All values are long (integer).\n(vA, vA+1) = (vA, vA+1) ^ (vB, vB+1)</item>
		<item>Shifts vA, vA+1 to the left by the number of bits specified by vB, and stores the result in the register pair vA, vA+1. All values are long (integer).\n(vA, vA+1) = (vA, vA+1) &lt;&lt; vB</item>
		<item>Shifts vA, vA+1 to the right by the number of bits specified by vB, and stores the result in the register pair vA, vA+1. All values are long (integer).\n(vA, vA+1) = (vA, vA+1) >> vB</item>
		<item>Shifts vA, vA+1 to the right without preserving the sign by the number of digits specified by vB, and stores the result in a pair of registers vA, vA+1. All values are long (integer).\n(vA, vA+1) = (vA, vA+1) >>> vB</item>
		<item>Computes vA + vB and stores the result in the vA register. All values are float.\nvA = vA + vB</item>
		<item>Calculates vA - vB and stores the result in the vA register. All values are float.\nvA = vA - vB</item>
		<item>Calculates vA * vB and stores the result in the vA register. All values are float.\nvA = vA * vB</item>
		<item>Calculates vA / vB and stores the result in the vA register. All values are float.\nvA = vA / vB</item>
		<item>Calculates vA % vB and stores the result in the vA register. All values are float.\nvA = vA % vB</item>
		<item>Computes (vA, vA+1) + (vB, vB+1) and stores the result in the register pair vA, vA+1. All values are double (floating point).\n(vA, vA+1) = (vA, vA+1) + (vB, vB+1)</item>
		<item>Calculates (vA, vA+1) - (vB, vB+1) and stores the result in a pair of registers vA, vA+1. All values are double (floating point).\n(vA, vA+1) = (vA, vA+1) - (vB, vB+1)</item>
		<item>Computes (vA, vA+1) * (vB, vB+1) and stores the result in the register pair vA, vA+1. All values are double (floating point).\n(vA, vA+1) = (vA, vA+1) * (vB, vB+1)</item>
		<item>Calculates (vA, vA+1) / (vB, vB+1) and stores the result in the register pair vA, vA+1. All values are double (floating point).\n(vA, vA+1) = (vA, vA+1) / (vB, vB+1)</item>
		<item>Calculates (vA, vA+1) % (vB, vB+1) and stores the result in the register pair vA, vA+1. All values are double (floating point).\n(vA, vA+1) = (vA, vA+1) % (vB, vB+1)</item>
		<item>Computes vB + 0xFFFF and stores the result in the vA register. All values are integer.\nvA = vB + 0xFFFF</item>
		<item>Computes 0xFFFF - vB and stores the result in the vA register. All values are integer.\nvA = 0xFFFF - vB</item>
		<item>Computes vB * 0xFFFF and stores the result in the vA register. All values are integer.\nvA = vB * 0xFFFF</item>
		<item>Calculates vB / 0xFFFF and stores the result in the vA register. All values are integer.\nvA = vB / 0xFFFF</item>
		<item>Computes vB % 0xFFFF and stores the result in the vA register. All values are integer.\nvA = vB % 0xFFFF</item>
		<item>Computes vB &amp; 0xFFFF (logical AND) and stores the result in the vA register. All values are integer.\nvA = vB &amp; 0xFFFF</item>
		<item>Calculates vB | 0xFFFF (logical OR) and stores the result in the vA register. All values are integer.\nvA = vB | 0xFFFF</item>
		<item>Computes vB ^ 0xFFFF (exclusive OR) and stores the result in the vA register. All values are integer.\nvA = vB ^ 0xFFFF</item>
		<item>Computes vBB + 0xFF and stores the result in the vAA register. All values are integer.\nvAA = vBB + 0xFF</item>
		<item>Calculates 0xFF - vBB and stores the result in the vAA register. All values are integer.\nvAA = 0xFF - vBB</item>
		<item>Computes vBB * 0xFF and stores the result in the vAA register. All values are integer.\nvAA = vBB * 0xFF</item>
		<item>Calculates vBB / 0xFF and stores the result in the vAA register. All values are integer.\nvAA = vBB / 0xFF</item>
		<item>Computes vBB % 0xFF and stores the result in the vAA register. All values are integer.\nvAA = vBB % 0xFF</item>
		<item>Computes vBB &amp; 0xFF (logical AND) and stores the result in the vAA register. All values are integer.\nvAA = vBB &amp; 0xFF</item>
		<item>Calculates vBB | 0xFF (logical OR) and stores the result in the vAA register. All values are integer.\nvAA = vBB | 0xFF</item>
		<item>Computes vBB ^ 0xFF (exclusive OR) and stores the result in the vAA register. All values are integer.\nvAA = vBB ^ 0xFF</item>
		<item>Shifts vBB left by the number of bits specified by 0xFF and stores the result in the vAA register. All values are integer.\nvAA = vBB &lt;&lt; 0xFF</item>
		<item>Shifts vBB to the right by the number of bits specified by 0xFF and stores the result in the vAA register. All values are integer.\nvAA = vBB >> 0xFF</item>
		<item>Signally shifts vBB to the right by the number of bits specified by 0xFF and stores the result in the vAA register. All values are integer.\nvAA = vBB >>> 0xFF</item>
		<item>Calls (runs) a polymorphic signature method with parameters. Present in Dex files since version 038.</item>
		<item>Calls (runs) a polymorphic signature method with parameters, but the parameters must be contained in sequentially numbered registers. Present in Dex files since version 038.</item>
		<item>Allows (starts) calling a site with parameters. Present in Dex files since version 038.</item>
		<item>Allows (starts) calling a site with parameters, but the parameters must be contained in registers with numbers in order. Present in Dex files since version 038.</item>
		<item>Places a reference to a method handle in the vAA register. Present in Dex files since version 039.</item>
		<item>Places a reference to the method prototype in the vAA register. Present in Dex files since version 039.</item>
	</string-array>
	<string-array name="years_or_days">
		<item>years</item>
		<item>days</item>
	</string-array>
	<string-array name="store_type">
		<item>Built-in</item>
		<item>Custom</item>
	</string-array>
	<string-array name="syntax_values">
		<item>@string/disable_syntax</item>
		<item>C++</item>
		<item>CSS</item>
		<item>Java</item>
		<item>JavaScript</item>
		<item>JSON</item>
		<item>Objective-C</item>
		<item>Smali</item>
		<item>XML</item>
	</string-array>
	<string-array name="aapts_version">
		<item>SDK30</item>
		<item>SDK33</item>
		<item>SDK35</item>
	</string-array>
	<string-array name="aapt2_dump">
		<item>badging</item>
		<item>configurations</item>
		<item>permissions</item>
		<item>strings</item>
		<item>resources</item>
		<item>overlayable</item>
	</string-array>
	<string-array name="aapt2_dump_descr">
		<item>Print information extracted from the manifest of the APK.</item>
		<item>Print every configuration used by a resource in the APK.</item>
		<item>Print the permissions extracted from the manifest of the APK.</item>
		<item>Print the contents of the resource table string pool in the APK.</item>
		<item>Print the contents of the resource table from the APK.</item>
		<item>Print the &lt;overlayable> resources of an APK.</item>
	</string-array>
	<string-array name="app_theme">
		<item>Light</item>
		<item>Dark</item>
		<item>Black</item>
	</string-array>
	<string-array name="app_theme_values">
		<item>0</item>
		<item>1</item>
		<item>2</item>
	</string-array>
	<string-array name="jadx_sets">
		<item>Fallback mode</item>
		<item>Deobfuscation</item>
		<item>Escape Unicode</item>
		<item>Show inconsistent code</item>
	</string-array>
	<string-array name="jadx_sets_keys">
		<item>jadx_fallback</item>
		<item>jadx_deobfuscation</item>
		<item>jadx_unicode</item>
		<item>jadx_inconsistent</item>
	</string-array>
	<string-array name="copy_variants">
		<item>Rename</item>
		<item>Rename files only</item>
		<item>Replace</item>
		<item>Skip</item>
	</string-array>
	<string-array name="menu_pos">
		<item>Left</item>
		<item>Right</item>
	</string-array>
	<string-array name="menu_pos_values">
		<item>0</item>
		<item>1</item>
	</string-array>
	<string-array name="file_size">
		<item>1 KiB = 1024 B</item>
		<item>1 kB = 1000 B</item>
	</string-array>
	<string-array name="file_size_values">
		<item>0</item>
		<item>1</item>
	</string-array>
	<string-array name="checksum_names">
		<item>All uppercase</item>
		<item>Separate with a colon</item>
	</string-array>
	<string-array name="checksum_keys">
		<item>checksum_upper</item>
		<item>checksum_separate</item>
	</string-array>
	<string-array name="tooltips_names">
		<item>Smali</item>
		<item>XML</item>
	</string-array>
	<string-array name="tooltips_keys">
		<item>tooltips_smali</item>
		<item>tooltips_xml</item>
	</string-array>
	<string-array name="refresh_res">
		<item>Add new resources (files only)</item>
		<item>Delete missing resources</item>
	</string-array>
	<string-array name="charsets">
		<item>UTF-8</item>
		<item>UTF-16</item>
		<item>UTF-16LE</item>
		<item>UTF-16BE</item>
		<item>US-ASCII</item>
		<item>ISO-8859-1</item>
		<item>CP1251</item>
	</string-array>
	<string-array name="sort">
		<item>Name</item>
		<item>Name reverse</item>
		<item>Type</item>
		<item>Type reverse</item>
		<item>Size</item>
		<item>Size reverse</item>
		<item>Time</item>
		<item>Time reverse</item>
	</string-array>
	<string-array name="color_var">
		<item>HEX-color</item>
		<item>Smali code</item>
		<item>A,R,G,B</item>
	</string-array>
	<string-array name="format">
		<item>@string/jks</item>
		<item>@string/pkcs12</item>
		<item>@string/bks</item>
		<item>@string/pk8</item>
	</string-array>
	<string-array name="keys">
		<item>editorkey</item>
		<item>media</item>
		<item>platform</item>
		<item>shared</item>
		<item>testkey</item>
	</string-array>
	<string-array name="keys_hash">
		<item>1817397831</item>
		<item>3661058070</item>
		<item>1463045784</item>
		<item>2725691727</item>
		<item>4152456470</item>
	</string-array>
	<string-array name="quantity_items">
		<item>zero</item>
		<item>one</item>
		<item>two</item>
		<item>few</item>
		<item>many</item>
		<item>other</item>
	</string-array>
	<string-array name="resDecodeMode">
		<item>Do not decompile</item>
		<item>Decompile to main directory</item>
		<item>Decompile into a separate directory</item>
		<item>Try to merge packages</item>
	</string-array>
	<string-array name="converter_items">
		<item>Text &lt;-> Base64</item>
		<item>Text &lt;-> Unicode</item>
		<item>Text &lt;-> URL encoding</item>
		<item>Text &lt;-> MD5</item>
		<item>Text &lt;-> SHA-1</item>
		<item>Text &lt;-> SHA-224</item>
		<item>Text &lt;-> SHA-256</item>
		<item>Text &lt;-> SHA-384</item>
		<item>Text &lt;-> SHA-512</item>
		<item>Text &lt;-> Array (UTF-8)</item>
		<item>Text &lt;-> Array (UTF-16)</item>
		<item>Text &lt;-> Array (UTF-16LE)</item>
		<item>Text &lt;-> Array (UTF-16BE)</item>
		<item>Text &lt;-> Array (US-ASCII)</item>
		<item>Text &lt;-> Array (ISO-8859-1)</item>
		<item>Text &lt;-> Array (CP1251)</item>
		<item>Decimal &lt;-> Binary</item>
		<item>Decimal &lt;-> Octal</item>
		<item>Decimal &lt;-> Hex</item>
		<item>Decimal &lt;-> Hex (0x0)</item>
		<item>Decimal &lt;-> Hex (0x00000000)</item>
		<item>Float &lt;-> Binary</item>
		<item>Float &lt;-> Octal</item>
		<item>Float &lt;-> Hex</item>
		<item>Float &lt;-> Hex (0x0)</item>
		<item>Float &lt;-> Hex (0x00000000)</item>
		<item>Color &lt;-> Smali</item>
		<item>Color &lt;-> Decimal</item>
		<item>Color &lt;-> A,R,G,B</item>
	</string-array>
	<string-array name="installLocation">
		<item>Not set</item>
		<item>Auto</item>
		<item>Internal only</item>
		<item>Preferred external</item>
	</string-array>
	<string-array name="algorithmsArray">
		<item>MD5withRSA</item>
		<item>SHA1withRSA</item>
		<item>SHA224withRSA</item>
		<item>SHA256withRSA</item>
		<item>SHA384withRSA</item>
		<item>SHA512withRSA</item>
	</string-array>
	<string-array name="entries_lang">
		<item>Русский</item>
		<item>Українська</item>
		<item>English</item>
		<item>Ελληνικά</item>
		<item>Français</item>
		<item>Deutsch</item>
		<item>Lituania</item>
		<item>Italiano</item>
		<item>Polski</item>
		<item>မြန်မာ</item>
		<item>中文</item>
		<item>Português</item>
		<item>Română</item>
		<item>Türkçe</item>
		<item>Čeština</item>
		<item>Việt Nam</item>
		<item>Български</item>
		<item>فارسی</item>
		<item>عربي</item>
		<item>Shqip</item>
		<item>한국어</item>
		<item>Español</item>
		<item>Bahasa Indonesia</item>
		<item>עברית</item>
		<item>Magyar</item>
	</string-array>
	<string-array name="values_lang">
		<item>ru</item>
		<item>uk</item>
		<item>en</item>
		<item>el</item>
		<item>fr</item>
		<item>de</item>
		<item>lt</item>
		<item>it</item>
		<item>pl</item>
		<item>my</item>
		<item>zh</item>
		<item>pt</item>
		<item>ro</item>
		<item>tr</item>
		<item>cs</item>
		<item>vi</item>
		<item>bg</item>
		<item>fa</item>
		<item>ar</item>
		<item>sq</item>
		<item>ko</item>
		<item>es</item>
		<item>in</item>
		<item>he</item>
		<item>hu</item>
	</string-array>
	<string-array name="date_variants">
		<item>yyyy/MM/dd HH:mm</item>
		<item>dd/MM/yyyy HH:mm</item>
		<item>HH:mm yyyy/MM/dd</item>
		<item>HH:mm dd/MM/yyyy</item>
		<item>yy/MM/dd HH:mm</item>
		<item>dd/MM/yy HH:mm</item>
		<item>HH:mm yy/MM/dd</item>
		<item>HH:mm dd/MM/yy</item>
		<item>yyyy.MM.dd HH:mm</item>
		<item>dd.MM.yyyy HH:mm</item>
		<item>HH:mm yyyy.MM.dd</item>
		<item>HH:mm dd.MM.yyyy</item>
		<item>yy.MM.dd HH:mm</item>
		<item>dd.MM.yy HH:mm</item>
		<item>HH:mm yy.MM.dd</item>
		<item>HH:mm dd.MM.yy</item>
		<item>yyyy-MM-dd HH:mm</item>
		<item>dd-MM-yyyy HH:mm</item>
		<item>HH:mm yyyy-MM-dd</item>
		<item>HH:mm dd-MM-yyyy</item>
		<item>yy-MM-dd HH:mm</item>
		<item>dd-MM-yy HH:mm</item>
		<item>HH:mm yy-MM-dd</item>
		<item>HH:mm dd-MM-yy</item>
	</string-array>
	<string-array name="xml_format_variants">
		<item>Default</item>
		<item>Apktool</item>
		<item>Android Studio</item>
		<item>Simple Trick</item>
	</string-array>
	<string-array name="xml_format_values">
		<item>0</item>
		<item>1</item>
		<item>2</item>
		<item>3</item>
	</string-array>
	<string-array name="orientation_variants">
		<item>Default</item>
		<item>Landscape</item>
		<item>Portrait</item>
	</string-array>
	<string-array name="orientation_values">
		<item>0</item>
		<item>1</item>
		<item>2</item>
	</string-array>
	<string-array name="auto_save_variants">
		<item>Off</item>
		<item>15 seconds</item>
		<item>30 seconds</item>
		<item>1 minute</item>
		<item>5 minutes</item>
	</string-array>
	<string-array name="auto_save_values">
		<item>0</item>
		<item>15</item>
		<item>30</item>
		<item>60</item>
		<item>300</item>
	</string-array>
	<string-array name="to_vector_values">
		<item>Adapted image (quality below)</item>
		<item>High quality image (larger size)</item>
		<item>Convert to SVG</item>
	</string-array>
	<string-array name="backup_values">
		<item>Settings</item>
		<item>Bookmarks</item>
		<item>Search/replace history</item>
		<item>Dictionaries</item>
	</string-array>
	<string-array name="split_dex_items">
		<item>by number of methods/fields</item>
		<item>into equal parts</item>
	</string-array>
	<string-array name="ds_display_items">
		<item>Date first</item>
		<item>Size first</item>
	</string-array>
	<string-array name="ds_display_values">
		<item>0</item>
		<item>1</item>
	</string-array>
	<string-array name="editor_themes">
		<item>Default</item>
		<item>New</item>
	</string-array>
	<string-array name="editor_themes_values">
		<item>default</item>
		<item>new</item>
	</string-array>
	<string-array name="bing_translator_codes">
		<item>auto-detect</item>
		<item>az</item>
		<item>sq</item>
		<item>en</item>
		<item>ar</item>
		<item>hy</item>
		<item>af</item>
		<item>bn</item>
		<item>bg</item>
		<item>bs</item>
		<item>cy</item>
		<item>hu</item>
		<item>vi</item>
		<item>ht</item>
		<item>nl</item>
		<item>el</item>
		<item>gu</item>
		<item>da</item>
		<item>he</item>
		<item>id</item>
		<item>ga</item>
		<item>is</item>
		<item>es</item>
		<item>it</item>
		<item>kk</item>
		<item>kn</item>
		<item>yue</item>
		<item>ca</item>
		<item>otq</item>
		<item>zh-Hant</item>
		<item>zh-Hans</item>
		<item>ko</item>
		<item>lv</item>
		<item>lt</item>
		<item>mg</item>
		<item>ms</item>
		<item>ml</item>
		<item>mt</item>
		<item>mi</item>
		<item>mr</item>
		<item>de</item>
		<item>ne</item>
		<item>nb</item>
		<item>or</item>
		<item>pa</item>
		<item>fa</item>
		<item>pl</item>
		<item>pt</item>
		<item>pt-PT</item>
		<item>ro</item>
		<item>ru</item>
		<item>sm</item>
		<item>sr-Cyrl</item>
		<item>sr-Latn</item>
		<item>sk</item>
		<item>sl</item>
		<item>sw</item>
		<item>ty</item>
		<item>th</item>
		<item>ta</item>
		<item>te</item>
		<item>to</item>
		<item>tr</item>
		<item>uk</item>
		<item>ur</item>
		<item>fj</item>
		<item>fil</item>
		<item>fi</item>
		<item>fr</item>
		<item>hi</item>
		<item>mww</item>
		<item>hr</item>
		<item>cs</item>
		<item>sv</item>
		<item>et</item>
		<item>yua</item>
		<item>ja</item>
		<item>am</item>
		<item>as</item>
		<item>prs</item>
		<item>fr-CA</item>
		<item>iu</item>
		<item>km</item>
		<item>tlh-Latn</item>
		<item>ku</item>
		<item>kmr</item>
		<item>lo</item>
		<item>my</item>
		<item>ps</item>
		<item>ti</item>
	</string-array>
	<string-array name="bing_translator_names">
		<item>Automatic</item>
		<item>Azerbaijani (Latin)</item>
		<item>Albanian</item>
		<item>English</item>
		<item>Arabic</item>
		<item>Armenian</item>
		<item>Afrikaans</item>
		<item>Bengali</item>
		<item>Bulgarian</item>
		<item>Bosnian</item>
		<item>Welsh</item>
		<item>Hungarian</item>
		<item>Vietnamese</item>
		<item>Haitian Creole</item>
		<item>Dutch</item>
		<item>Greek</item>
		<item>Gujarati</item>
		<item>Danish</item>
		<item>Hebrew</item>
		<item>Indonesian</item>
		<item>Irish</item>
		<item>Icelandic</item>
		<item>Spanish</item>
		<item>Italian</item>
		<item>Kazakh</item>
		<item>Kannada</item>
		<item>Cantonese Traditional</item>
		<item>Catalan</item>
		<item>Keretarian Otomi</item>
		<item>Traditional Chinese</item>
		<item>Chinese Simplified</item>
		<item>Korean</item>
		<item>Latvian</item>
		<item>Lithuanian</item>
		<item>Malagasy</item>
		<item>Malay</item>
		<item>Malayalam</item>
		<item>Maltese</item>
		<item>Maori</item>
		<item>Marathi</item>
		<item>German</item>
		<item>Nepali</item>
		<item>Norwegian</item>
		<item>Oriya</item>
		<item>Punjabi</item>
		<item>Persian</item>
		<item>Polish</item>
		<item>Portuguese (Brazil)</item>
		<item>Portuguese (Portugal)</item>
		<item>Romanian</item>
		<item>Russian</item>
		<item>Samoa</item>
		<item>Serbian (Cyrillic)</item>
		<item>Serbian (Latin)</item>
		<item>Slovak</item>
		<item>Slovenian</item>
		<item>Swahili</item>
		<item>Tahiti</item>
		<item>Thai</item>
		<item>Tamil</item>
		<item>Telugu</item>
		<item>Tonga</item>
		<item>Turkish</item>
		<item>Ukrainian</item>
		<item>Urdu</item>
		<item>Fiji</item>
		<item>Filipino</item>
		<item>Finnish</item>
		<item>French</item>
		<item>Hindi</item>
		<item>Hmong Dhow</item>
		<item>Croatian</item>
		<item>Czech</item>
		<item>Swedish</item>
		<item>Estonian</item>
		<item>Yucatec Maya</item>
		<item>Japanese</item>
		<item>Amharic</item>
		<item>Assamese</item>
		<item>Dari</item>
		<item>French (Canada)</item>
		<item>Inuktitut</item>
		<item>Khmer</item>
		<item>Klingon (Latin)</item>
		<item>Kurdish (Central)</item>
		<item>Kurdish (Northern)</item>
		<item>Lao</item>
		<item>Myanmar (Burmese)</item>
		<item>Pashto</item>
		<item>Tigrinya</item>
	</string-array>
	<string-array name="google_translator_codes">
		<item>auto</item>
		<item>af</item>
		<item>sq</item>
		<item>am</item>
		<item>ar</item>
		<item>hy</item>
		<item>az</item>
		<item>eu</item>
		<item>be</item>
		<item>bn</item>
		<item>bs</item>
		<item>bg</item>
		<item>ca</item>
		<item>ceb</item>
		<item>ny</item>
		<item>zh-cn</item>
		<item>zh-tw</item>
		<item>co</item>
		<item>hr</item>
		<item>cs</item>
		<item>da</item>
		<item>nl</item>
		<item>en</item>
		<item>eo</item>
		<item>et</item>
		<item>tl</item>
		<item>fi</item>
		<item>fr</item>
		<item>fy</item>
		<item>gl</item>
		<item>ka</item>
		<item>de</item>
		<item>el</item>
		<item>gu</item>
		<item>ht</item>
		<item>ha</item>
		<item>haw</item>
		<item>iw</item>
		<item>hi</item>
		<item>hmn</item>
		<item>hu</item>
		<item>is</item>
		<item>ig</item>
		<item>id</item>
		<item>ga</item>
		<item>it</item>
		<item>ja</item>
		<item>jw</item>
		<item>kn</item>
		<item>kk</item>
		<item>km</item>
		<item>ko</item>
		<item>ku</item>
		<item>ky</item>
		<item>lo</item>
		<item>la</item>
		<item>lv</item>
		<item>lt</item>
		<item>lb</item>
		<item>mk</item>
		<item>mg</item>
		<item>ms</item>
		<item>ml</item>
		<item>mt</item>
		<item>mi</item>
		<item>mr</item>
		<item>mn</item>
		<item>my</item>
		<item>ne</item>
		<item>no</item>
		<item>ps</item>
		<item>fa</item>
		<item>pl</item>
		<item>pt</item>
		<item>ma</item>
		<item>ro</item>
		<item>ru</item>
		<item>sm</item>
		<item>gd</item>
		<item>sr</item>
		<item>st</item>
		<item>sn</item>
		<item>sd</item>
		<item>si</item>
		<item>sk</item>
		<item>sl</item>
		<item>so</item>
		<item>es</item>
		<item>su</item>
		<item>sw</item>
		<item>sv</item>
		<item>tg</item>
		<item>ta</item>
		<item>te</item>
		<item>th</item>
		<item>tr</item>
		<item>uk</item>
		<item>ur</item>
		<item>uz</item>
		<item>vi</item>
		<item>cy</item>
		<item>xh</item>
		<item>yi</item>
		<item>yo</item>
		<item>zu</item>
		<item>or</item>
		<item>pa</item>
		<item>rw</item>
		<item>tt</item>
		<item>tk</item>
		<item>ug</item>
	</string-array>
	<string-array name="google_translator_names">
		<item>Automatic</item>
		<item>Afrikaans</item>
		<item>Albanian</item>
		<item>Amharic</item>
		<item>Arabic</item>
		<item>Armenian</item>
		<item>Azerbaijani</item>
		<item>Basque</item>
		<item>Belarusian</item>
		<item>Bengali</item>
		<item>Bosnian</item>
		<item>Bulgarian</item>
		<item>Catalan</item>
		<item>Cebuano</item>
		<item>Chichewa</item>
		<item>Chinese Simplified</item>
		<item>Chinese Traditional</item>
		<item>Corsican</item>
		<item>Croatian</item>
		<item>Czech</item>
		<item>Danish</item>
		<item>Dutch</item>
		<item>English</item>
		<item>Esperanto</item>
		<item>Estonian</item>
		<item>Filipino</item>
		<item>Finnish</item>
		<item>French</item>
		<item>Frisian</item>
		<item>Galician</item>
		<item>Georgian</item>
		<item>German</item>
		<item>Greek</item>
		<item>Gujarati</item>
		<item>Haitian Creole</item>
		<item>Hausa</item>
		<item>Hawaiian</item>
		<item>Hebrew</item>
		<item>Hindi</item>
		<item>Hmong</item>
		<item>Hungarian</item>
		<item>Icelandic</item>
		<item>Igbo</item>
		<item>Indonesian</item>
		<item>Irish</item>
		<item>Italian</item>
		<item>Japanese</item>
		<item>Javanese</item>
		<item>Kannada</item>
		<item>Kazakh</item>
		<item>Khmer</item>
		<item>Korean</item>
		<item>Kurdish (Kurmanji)</item>
		<item>Kyrgyz</item>
		<item>Lao</item>
		<item>Latin</item>
		<item>Latvian</item>
		<item>Lithuanian</item>
		<item>Luxembourgish</item>
		<item>Macedonian</item>
		<item>Malagasy</item>
		<item>Malay</item>
		<item>Malayalam</item>
		<item>Maltese</item>
		<item>Maori</item>
		<item>Marathi</item>
		<item>Mongolian</item>
		<item>Myanmar (Burmese)</item>
		<item>Nepali</item>
		<item>Norwegian</item>
		<item>Pashto</item>
		<item>Persian</item>
		<item>Polish</item>
		<item>Portuguese</item>
		<item>Punjabi</item>
		<item>Romanian</item>
		<item>Russian</item>
		<item>Samoan</item>
		<item>Scots Gaelic</item>
		<item>Serbian</item>
		<item>Sesotho</item>
		<item>Shona</item>
		<item>Sindhi</item>
		<item>Sinhala</item>
		<item>Slovak</item>
		<item>Slovenian</item>
		<item>Somali</item>
		<item>Spanish</item>
		<item>Sundanese</item>
		<item>Swahili</item>
		<item>Swedish</item>
		<item>Tajik</item>
		<item>Tamil</item>
		<item>Telugu</item>
		<item>Thai</item>
		<item>Turkish</item>
		<item>Ukrainian</item>
		<item>Urdu</item>
		<item>Uzbek</item>
		<item>Vietnamese</item>
		<item>Welsh</item>
		<item>Xhosa</item>
		<item>Yiddish</item>
		<item>Yoruba</item>
		<item>Zulu</item>
		<item>Oriya</item>
		<item>Punjabi</item>
		<item>Rwanda</item>
		<item>Tatar</item>
		<item>Turkmen</item>
		<item>Uigur</item>
	</string-array>
	<string-array name="yandex_translator_codes">
		<item>auto</item>
		<item>af</item>
		<item>sq</item>
		<item>am</item>
		<item>ar</item>
		<item>hy</item>
		<item>az</item>
		<item>ba</item>
		<item>eu</item>
		<item>be</item>
		<item>bn</item>
		<item>bs</item>
		<item>bg</item>
		<item>my</item>
		<item>ca</item>
		<item>ceb</item>
		<item>zh</item>
		<item>cv</item>
		<item>hr</item>
		<item>cs</item>
		<item>da</item>
		<item>nl</item>
		<item>sjn</item>
		<item>emj</item>
		<item>en</item>
		<item>eo</item>
		<item>et</item>
		<item>fi</item>
		<item>fr</item>
		<item>gl</item>
		<item>ka</item>
		<item>de</item>
		<item>el</item>
		<item>gu</item>
		<item>ht</item>
		<item>he</item>
		<item>mrj</item>
		<item>hi</item>
		<item>hu</item>
		<item>is</item>
		<item>id</item>
		<item>ga</item>
		<item>it</item>
		<item>ja</item>
		<item>jv</item>
		<item>kn</item>
		<item>kk</item>
		<item>kazlat</item>
		<item>km</item>
		<item>ko</item>
		<item>ky</item>
		<item>lo</item>
		<item>la</item>
		<item>lv</item>
		<item>lt</item>
		<item>lb</item>
		<item>mk</item>
		<item>mg</item>
		<item>ms</item>
		<item>ml</item>
		<item>mt</item>
		<item>mi</item>
		<item>mr</item>
		<item>mhr</item>
		<item>mn</item>
		<item>ne</item>
		<item>no</item>
		<item>pap</item>
		<item>fa</item>
		<item>pl</item>
		<item>pt</item>
		<item>pa</item>
		<item>ro</item>
		<item>ru</item>
		<item>gd</item>
		<item>sr</item>
		<item>si</item>
		<item>sk</item>
		<item>sl</item>
		<item>es</item>
		<item>su</item>
		<item>sw</item>
		<item>sv</item>
		<item>tl</item>
		<item>tg</item>
		<item>ta</item>
		<item>tt</item>
		<item>te</item>
		<item>th</item>
		<item>tr</item>
		<item>udm</item>
		<item>uk</item>
		<item>ur</item>
		<item>uz</item>
		<item>uzbcyr</item>
		<item>vi</item>
		<item>cy</item>
		<item>xh</item>
		<item>sah</item>
		<item>yi</item>
	</string-array>
	<string-array name="yandex_translator_names">
		<item>Automatic</item>
		<item>Afrikaans</item>
		<item>Albanian</item>
		<item>Amharic</item>
		<item>Arabic</item>
		<item>Armenian</item>
		<item>Azerbaijani</item>
		<item>Bashkir</item>
		<item>Basque</item>
		<item>Belarusian</item>
		<item>Bengali</item>
		<item>Bosnian</item>
		<item>Bulgarian</item>
		<item>Burmese</item>
		<item>Catalan</item>
		<item>Cebuano</item>
		<item>Chinese</item>
		<item>Chuvash</item>
		<item>Croatian</item>
		<item>Czech</item>
		<item>Danish</item>
		<item>Dutch</item>
		<item>Elvish (Sindarin)</item>
		<item>Emoji</item>
		<item>English</item>
		<item>Esperanto</item>
		<item>Estonian</item>
		<item>Finnish</item>
		<item>French</item>
		<item>Galician</item>
		<item>Georgian</item>
		<item>German</item>
		<item>Greek</item>
		<item>Gujarati</item>
		<item>Haitian</item>
		<item>Hebrew</item>
		<item>Hill Mari</item>
		<item>Hindi</item>
		<item>Hungarian</item>
		<item>Icelandic</item>
		<item>Indonesian</item>
		<item>Irish</item>
		<item>Italian</item>
		<item>Japanese</item>
		<item>Javanese</item>
		<item>Kannada</item>
		<item>Kazakh</item>
		<item>Kazakh (Latin)</item>
		<item>Khmer</item>
		<item>Korean</item>
		<item>Kyrgyz</item>
		<item>Lao</item>
		<item>Latin</item>
		<item>Latvian</item>
		<item>Lithuanian</item>
		<item>Luxembourgish</item>
		<item>Macedonian</item>
		<item>Malagasy</item>
		<item>Malay</item>
		<item>Malayalam</item>
		<item>Maltese</item>
		<item>Maori</item>
		<item>Marathi</item>
		<item>Mari</item>
		<item>Mongolian</item>
		<item>Nepali</item>
		<item>Norwegian</item>
		<item>Papiamento</item>
		<item>Persian</item>
		<item>Polish</item>
		<item>Portuguese</item>
		<item>Punjabi</item>
		<item>Romanian</item>
		<item>Russian</item>
		<item>Scottish Gaelic</item>
		<item>Serbian</item>
		<item>Sinhalese</item>
		<item>Slovak</item>
		<item>Slovenian</item>
		<item>Spanish</item>
		<item>Sundanese</item>
		<item>Swahili</item>
		<item>Swedish</item>
		<item>Tagalog</item>
		<item>Tajik</item>
		<item>Tamil</item>
		<item>Tatar</item>
		<item>Telugu</item>
		<item>Thai</item>
		<item>Turkish</item>
		<item>Udmurt</item>
		<item>Ukrainian</item>
		<item>Urdu</item>
		<item>Uzbek</item>
		<item>Uzbek (Cyrillic)</item>
		<item>Vietnamese</item>
		<item>Welsh</item>
		<item>Xhosa</item>
		<item>Yakut</item>
		<item>Yiddish</item>
	</string-array>
	<string-array name="deepl_translator_codes">
		<item>auto</item>
		<item>ar</item>
		<item>bg</item>
		<item>zh</item>
		<item>cs</item>
		<item>da</item>
		<item>nl</item>
		<item>en</item>
		<item>et</item>
		<item>fi</item>
		<item>fr</item>
		<item>de</item>
		<item>el</item>
		<item>hu</item>
		<item>id</item>
		<item>it</item>
		<item>ja</item>
		<item>ko</item>
		<item>lv</item>
		<item>lt</item>
		<item>nb</item>
		<item>pl</item>
		<item>pt</item>
		<item>ro</item>
		<item>ru</item>
		<item>sk</item>
		<item>sl</item>
		<item>es</item>
		<item>sv</item>
		<item>tr</item>
		<item>uk</item>
	</string-array>
	<string-array name="deepl_translator_names">
		<item>Auto</item>
		<item>Arabic</item>
		<item>Bulgarian</item>
		<item>Chinese</item>
		<item>Czech</item>
		<item>Danish</item>
		<item>Dutch</item>
		<item>English</item>
		<item>Estonian</item>
		<item>Finnish</item>
		<item>French</item>
		<item>German</item>
		<item>Greek</item>
		<item>Hungarian</item>
		<item>Indonesian</item>
		<item>Italian</item>
		<item>Japanese</item>
		<item>Korean</item>
		<item>Latvian</item>
		<item>Lithuanian</item>
		<item>Norwegian (Bokmål)</item>
		<item>Polish</item>
		<item>Portuguese</item>
		<item>Romanian</item>
		<item>Russian</item>
		<item>Slovak</item>
		<item>Slovenian</item>
		<item>Spanish</item>
		<item>Swedish</item>
		<item>Turkish</item>
		<item>Ukrainian</item>
	</string-array>
</resources>